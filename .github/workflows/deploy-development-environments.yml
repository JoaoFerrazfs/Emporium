name: Deploy by issue
permissions: write-all
on:
  issues:
    types: [opened]

jobs:
  deploy:
    if: contains(github.event.issue.labels.*.name, 'environment-deploy')
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Assign issue
        run: gh issue edit ${{ github.event.issue.number }} --add-assignee ${{ github.event.issue.user.login }}

      - name: Parse issue
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/deploy-environments.yml

      - name: Issue branch validation
        run: |
          validatedIssueBranches=""
          branches="${{ steps.issue-parser.outputs.issueparser_branches }}"
          IFS=',' read -ra branch_array <<< "$branches"

          for branch in "${branch_array[@]}"; do
            set +e
            git ls-remote --exit-code --heads origin $branch &> /dev/null
            branch_exists=$?

            if [[ "$branch_exists" == "0" ]]; then
              git checkout $branch &> /dev/null
              git log --pretty=format:"%h" master | grep $(git log --pretty=format:"%h" -1 $branch) &> /dev/null
              branch_merged=$?
            fi

            if [[ "$branch_exists" != "0" || "$branch_merged" != "0" ]]; then
              echo "error=Branch does not exist or has been merged: '$branch'" >> $GITHUB_ENV
              set -e
              exit 1
            fi

            validatedIssueBranches+="$branch,"
            echo "validatedIssueBranches= ${validatedIssueBranches%,}" >> $GITHUB_ENV
          done

      - name: Close issue
        if: failure() && !cancelled()
        run: gh issue close ${{ github.event.issue.number }} -c "❗ ${{ env.error }}"

      - name: Validation success
        run: gh issue comment ${{ github.event.issue.number }} -b "⭐ Branch validation success"

      - name: Set environments to work
        run: |
          environments="${{ steps.issue-parser.outputs.issueparser_environments }}"
          IFS=, read -ra EnvironmentArray <<< "$environments"

          for environment in "${EnvironmentArray[@]}"; do
            environment=$(echo "$environment" | xargs)

            echo "${environment}=${environment}" >> $GITHUB_ENV
          done

      - name : Create new develop branch
        if: ${{ env.develop }}
        env:
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@github.com
        run: |
          rm -rf error.log

          git checkout master
          ./.github/support/handle-environments-branches.sh develop

          git checkout master
          ./.github/support/build-environments-branches.sh develop

      - name: Send error feedback and close issue
        if: failure() && !cancelled()
        run: gh issue close ${{ github.event.issue.number }} -c "❗$(cat error.log)"

      - name : Create new homolog branch
        if: ${{ env.homolog }}
        env:
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@github.com
        run: |
          rm -rf error.log

          git checkout master
          ./.github/support/handle-environments-branches.sh homolog

          git checkout master
          ./.github/support/build-environments-branches.sh homolog

      - name: Send error feedback and close issue
        if: failure() && !cancelled()
        run: gh issue close ${{ github.event.issue.number }} -c "❗$(cat error.log)"

      - name : Create new staging branch
        if: ${{ env.staging }}
        env:
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@github.com
        run: |
          rm -rf error.log

          git checkout master
          ./.github/support/handle-environments-branches.sh staging

          git checkout master
          ./.github/support/build-environments-branches.sh staging

      - name: Send error feedback and close issue
        if: failure() && !cancelled()
        run: gh issue close ${{ github.event.issue.number }} -c "❗$(cat error.log)"

      - name: Branches updated with success
        run: |
          allBranches="${{ env.validatedIssueBranches }},${{ env.validatedBranches }}"

          IFS=, read -ra BranchArray <<< "$allBranches"

          comment_message="⚡ Branches updated successfully!

          The new branches contents:
          "

          for branch in "${BranchArray[@]}"; do
          comment_message+=" - $branch
          "
          done

          gh issue comment ${{ github.event.issue.number }} -b "$comment_message"


