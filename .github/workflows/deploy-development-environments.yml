name: Deploy by issue
permissions: write-all
on:
  issues:
    types: [opened]
    
jobs:
  deploy:
    if: contains(github.event.issue.labels.*.name, 'environment-deploy')
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse Issue
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/deploy-environments.yml

      - name: Branch Validation
        run: |
          branches="${{ steps.issue-parser.outputs.issueparser_branches }}"
          IFS=',' read -ra branch_array <<< "$branches"

          for branch in "${branch_array[@]}"; do
            set +e
            git ls-remote --exit-code --heads origin $branch &> /dev/null
            branch_exists=$?
            
            if [[ "$branch_exists" == "0" ]]; then
              git checkout $branch &> /dev/null
              git log --pretty=format:"%h" master | grep $(git log --pretty=format:"%h" -1 $branch) &> /dev/null
              branch_merged=$?
            fi
            
            if [[ "$branch_exists" != "0" || "$branch_merged" != "0" ]]; then
              echo "error=Branch does not exist or has been merged: '$branch'" >> $GITHUB_ENV
              set -e
              exit 1
            fi
          done
    
      - name: Close issue
        if: failure() && !cancelled()
        run: gh issue close ${{ github.event.issue.number }} -c "❗ ${{ env.error }}"
  
      - name: Validation success
        run: gh issue comment ${{ github.event.issue.number }} -b "⭐ Branch validation success"
  
      - name: Create branch
        run: |
          echo "Checkout develop..."
          git checkout master &> /dev/null
          
          echo "Deleting homolog_gha..."
          git branch -D develop &> /dev/null 

          echo "Recreating develop..."
          git checkout -b develop 
          
          IFS=, read -ra branches < ./.github/workflows/support/develop-branches.txt

          validatedBranches=""
          
          for branch in "${branches[@]}"; do
            branch=$(echo "$branch" | sed 's/^[ \t]*//;s/[ \t]*$//')
          
            set +e
            git ls-remote --exit-code --heads origin "$branch" &> /dev/null
            branch_exists=$?
          
            if [[ "$branch_exists" == "0" ]]; then
              git checkout "$branch" &> /dev/null
              git log --pretty=format:"%h" master | grep "$(git log --pretty=format:"%h" -1 "$branch")" &> /dev/null
              branch_merged=$?
          
              if [[ "$branch_merged" == "0" ]]; then
                # Se a branch existe e foi mesclada, faça o rebase com a master
                git rebase master
              fi
          
              # Adiciona a branch ao final da string validatedBranches
              validatedBranches+="$branch,"
            fi
          
            echo "Nome da branch: $branch"
          done
          
          # Remove a vírgula extra do final da string validatedBranches
          validatedBranches="${validatedBranches%,}"
          
          echo "Branches validadas: $validatedBranches"

      
