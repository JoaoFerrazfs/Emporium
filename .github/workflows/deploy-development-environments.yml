name: Deploy by issue
permissions: write-all
on:
  issues:
    types: [opened]


jobs:
  validate-issues:
    if: contains(github.event.issue.labels.*.name, 'environment-deploy')
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      environments: ${{ steps.issue-parser.outputs.issueparser_environments }}
      branches: ${{ steps.issue-parser.outputs.issueparser_branches }}
      mustRemove: ${{ steps.issue-parser.outputs.issueparser_mustRemove }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Assign issue
        run: |
          gh issue edit ${{ github.event.issue.number }} --add-assignee ${{ github.event.issue.user.login }}

          gh issue comment ${{ github.event.issue.number }} -b "
            ⌛ To follow the runner click here:
            - https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Parse issue
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/deploy-environments.yml

      - name: Validation of submitted branches
        run: |
          validatedIssueBranches=""
          branches="${{ steps.issue-parser.outputs.issueparser_branches }}"
          IFS=',' read -ra branch_array <<< "$branches"

          for branch in "${branch_array[@]}"; do
            set +e
            git ls-remote --exit-code --heads origin $branch &> /dev/null
            branch_exists=$?

            if [[ "$branch_exists" == "0" ]]; then
              git checkout $branch &> /dev/null
              git log --pretty=format:"%h" master | grep `git log --pretty=format:"%h" -1 $branch` &> /dev/null
              branch_merged=$?

              if [[ "$branch_merged" == "0" ]]; then
                echo "error= 🚫 The **$branch** exists, but has already been merged." >> $GITHUB_ENV
                set -e
                exit 1
              fi

            else
              echo "error= 🚫 The **$branch** non exists." >> $GITHUB_ENV
              set -e
              exit 1
            fi
          done

          gh issue comment ${{ github.event.issue.number }} -b "☑️ Branch validation success"

      - name: Send error feedback and close issue
        if: failure() && !cancelled()
        run: gh issue close ${{ github.event.issue.number }} -c "${{ env.error }}"

  recreate-branches:
    needs: validate-issues
    uses: JoaoFerrazfs/Emporium/.github/workflows/auto-handle-environments-branches.yml@master
    with:
      environments: ${{ needs.validate-issues.outputs.environments }}
      branches: ${{ needs.validate-issues.outputs.branches }}
      mustRemove: ${{ needs.validate-issues.outputs.mustRemove }}

  send-feedbacks:
    needs:
      - recreate-branches
      - validate-issues
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Branches updated with success
        run: |
          error="${{ needs.recreate-branches.outputs.error }}"

          if [[ -n "$error" ]]; then
           echo "$error"
           gh issue close ${{ github.event.issue.number }} -c "
          🚫 An error occurred, you can read below and also access the pipeline to read in more detail:

             $error"
           exit 0
          fi

          add_comment_for_environment() {
            local environment=$1
            local branches_output=$2

            comment_message="☑️ Branch **$environment** updated!
            The new branches contents:"

            while IFS=, read -ra branches; do
              for branch in "${branches[@]}"; do
                comment_message+="
                🔹 $branch"
              done

              if ! [[ -n "$branches" ]]; then
                comment_message+="
                    Only contains the contents of the main branch"
              fi

            done <<< "$branches_output"

            gh issue comment ${{ github.event.issue.number }} -b "$comment_message"
          }

          IFS=, read -ra branches <<< "${{ needs.validate-issues.outputs.environments }}"
          for branch in "${branches[@]}"; do
            if [[ "$branch" == "develop" ]]; then
             add_comment_for_environment "develop" "${{ needs.recreate-branches.outputs.develop }}"
            fi

            if [[ "$branch" == "homolog" ]]; then
              add_comment_for_environment "homolog" "${{ needs.recreate-branches.outputs.homolog }}"
            fi

             if [[ "$branch" == "staging" ]]; then
              add_comment_for_environment "staging" "${{ needs.recreate-branches.outputs.staging }}"
            fi
          done

          gh issue close ${{ github.event.issue.number }} -c "✅ Branches updated successfully!"
