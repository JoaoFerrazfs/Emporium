name: Deploy by issue
permissions: write-all
on:
  issues:
    types: [opened]

jobs:
  deploy:
    if: contains(github.event.issue.labels.*.name, 'environment-deploy')
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Assign issue
        run: |
          gh issue edit ${{ github.event.issue.number }} --add-assignee ${{ github.event.issue.user.login }}
          gh issue comment ${{ github.event.issue.number }} -b "
            ⌛ To follow the runner click here:
            - https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Parse issue
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/deploy-environments.yml

      - name: Issue branch validation
        run: |
            validatedIssueBranches=""
            branches="${{ steps.issue-parser.outputs.issueparser_branches }}"
            IFS=',' read -ra branch_array <<< "$branches"

            for branch in "${branch_array[@]}"; do
              set +e
              git ls-remote --exit-code --heads origin $branch &> /dev/null
              branch_exists=$?

              if [[ "$branch_exists" == "0" ]]; then
                git checkout $branch &> /dev/null
                git log --pretty=format:"%h" develop | grep `git log --pretty=format:"%h" -1 $branch` &> /dev/null
                branch_merged=$?

                if [[ "$branch_merged" == "0" ]]; then
                  echo "error=A branch $branch existe, mas já foi mergeada.: '$branch'" >> $GITHUB_ENV
                  set -e
                  exit 1
                else
                  validatedIssueBranches+="$branch,"
                  echo "validatedIssueBranches=${validatedIssueBranches%,}" >> $GITHUB_ENV
                fi
                else
                  echo "error=A branch não existe.: '$branch'" >> $GITHUB_ENV
                  set -e
                  exit 1
              fi
            done

      - name: Close issue
        if: failure() && !cancelled()
        run: gh issue close ${{ github.event.issue.number }} -c "❗ ${{ env.error }}"

      - name: Validation success
        run: gh issue comment ${{ github.event.issue.number }} -b "⭐ Branch validation success"

      - name: Set environments envs to work
        run: |
          environments="${{ steps.issue-parser.outputs.issueparser_environments }}"
          IFS=, read -ra EnvironmentArray <<< "$environments"

          for environment in "${EnvironmentArray[@]}"; do
            environment=$(echo "$environment" | xargs)

            echo "${environment}=${environment}" >> $GITHUB_ENV
          done

          if [ -n "${{ steps.issue-parser.outputs.issueparser_shouldRemove }}" ]; then
            echo "shouldRemove=true" >> $GITHUB_ENV
          fi

      - name : Create new environments branches
        env:
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@github.com
        run: |

          if [ "${{ env.develop }}" ]; then

            echo "Starting new branch develop"
            git checkout master

            ./.github/support/handle-environments-branches.sh develop

            comment_message="⚡ Branch **develop** updated!

            The new branches contents:"

              while IFS=, read -ra branches; do
                for branch in "${branches[@]}"; do
                  comment_message+="
                    - $branch"
                done
              done < ./.github/support/develop-branches.txt

            gh issue comment ${{ github.event.issue.number }} -b "$comment_message"
          fi

          if [ "${{ env.homolog }}" ]; then

            echo "Starting new branch homolog"
            rm -rf error.log

            git checkout master
            ./.github/support/handle-environments-branches.sh homolog

            comment_message="⚡ Branch **homolog** updated!

            The new branches contents:"

              while IFS=, read -ra branches; do
                for branch in "${branches[@]}"; do
                  comment_message+="
                    - $branch"
                done
              done < ./.github/support/homolog-branches.txt

             gh issue comment ${{ github.event.issue.number }} -b "$comment_message"
          fi

          if [ "${{ env.staging }}" ]; then

            echo "Starting new branch staging"
            rm -rf error.log

            git checkout master
            ./.github/support/handle-environments-branches.sh staging

            comment_message="⚡ Branch **staging** updated!

            The new branches contents:"

              while IFS=, read -ra branches; do
                for branch in "${branches[@]}"; do
                  comment_message+="
                    - $branch"
                done
              done < ./.github/support/staging-branches.txt

             gh issue comment ${{ github.event.issue.number }} -b "$comment_message"
          fi

      - name: Send error feedback and close issue
        if: failure() && !cancelled()
        run: gh issue close ${{ github.event.issue.number }} -c "❗$(cat error.log)"

      - name: Branches updated with success
        run: gh issue close ${{ github.event.issue.number }} -c "⚡ Branches updated successfully!"

