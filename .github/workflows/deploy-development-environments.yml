name: Deploy by issue
permissions: write-all
on:
  issues:
    types: [opened]
  push:
    branches: [master]

jobs:
  validate-issues:
    if: contains(github.event.issue.labels.*.name, 'environment-deploy')
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      environments: ${{ steps.issue-parser.outputs.issueparser_environments }}
      branches: ${{ steps.issue-parser.outputs.issueparser_branches }}
      mustRemove: ${{ steps.issue-parser.outputs.issueparser_mustRemove }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Assign issue
        run: |
          gh issue edit ${{ github.event.issue.number }} --add-assignee ${{ github.event.issue.user.login }}

          gh issue comment ${{ github.event.issue.number }} -b "
            ‚åõ To follow the runner click here:
            - https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Parse issue
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/deploy-environments.yml

      - name: Validation of submitted branches
        run: |
            validatedIssueBranches=""
            branches="${{ steps.issue-parser.outputs.issueparser_branches }}"
            IFS=',' read -ra branch_array <<< "$branches"

            for branch in "${branch_array[@]}"; do
              set +e
              git ls-remote --exit-code --heads origin $branch &> /dev/null
              branch_exists=$?

              if [[ "$branch_exists" == "0" ]]; then
                git checkout $branch &> /dev/null
                git log --pretty=format:"%h" master | grep `git log --pretty=format:"%h" -1 $branch` &> /dev/null
                branch_merged=$?

                if [[ "$branch_merged" == "0" ]]; then
                  echo "error= üí¢ The **$branch** exists, but has already been merged." >> $GITHUB_ENV
                  set -e
                  exit 1
                fi

              else
                echo "error= üí¢ The **$branch** non exists." >> $GITHUB_ENV
                set -e
                exit 1
              fi
            done

            gh issue comment ${{ github.event.issue.number }} -b "‚≠ê Branch validation success"

      - name: Send error feedback and close issue
        if: failure() && !cancelled()
        run: gh issue close ${{ github.event.issue.number }} -c "‚ùó ${{ env.error }}"

  new-environments-branches:
    needs: validate-issues
    uses: JoaoFerrazfs/Emporium/.github/workflows/auto-handle-environments-branches.yml@master
    with:
      environments: ${{ needs.validate-issues.outputs.environments }}
      branches: ${{ needs.validate-issues.outputs.branches }}
      mustRemove: ${{ needs.validate-issues.outputs.mustRemove }}

  send-feedbacks:
    needs:
      - new-environments-branches
      - validate-issues
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Branches updated with success
        run: |
          IFS=',' read -ra environments <<< "${{ needs.validate-issues.outputs.environments }}"
          for environment in "${environments[@]}"; do

            if [[ "$environment" == "develop" ]]; then
              comment_message="‚ö° Branch **$environment** updated!
              The new branches contents:"
                while IFS=, read -ra branches; do
                  for branch in "${branches[@]}"; do
                    comment_message+="
                      - $branch"
                  done
                done <<< "${{ needs.new-environments-branches.outputs.develop }}"

               gh issue comment ${{ github.event.issue.number }} -b "$comment_message"
            fi

            if [[ "$environment" == "homolog" ]]; then
              comment_message="‚ö° Branch **$environment** updated!
              The new branches contents:"
                while IFS=, read -ra branches; do
                  for branch in "${branches[@]}"; do
                    comment_message+="
                      - $branch"
                  done
                done <<< "${{ needs.new-environments-branches.outputs.homolog }}"

               gh issue comment ${{ github.event.issue.number }} -b "$comment_message"
            fi

            if [[ "$environment" == "staging" ]]; then
              comment_message="‚ö° Branch **$environment** updated!
              The new branches contents:"
                while IFS=, read -ra branches; do
                  for branch in "${branches[@]}"; do
                    comment_message+="
                      - $branch"
                  done
                done <<< "${{ needs.new-environments-branches.outputs.staging }}"

               gh issue comment ${{ github.event.issue.number }} -b "$comment_message"
            fi

          done

          echo "teste: ${{ needs.new-environments-branches.outputs.error }}"

          gh issue close ${{ github.event.issue.number }} -c "üåü Branches updated successfully!"
